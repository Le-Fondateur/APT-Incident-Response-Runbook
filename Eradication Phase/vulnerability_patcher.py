import os
import logging
import subprocess
import json

logging.basicConfig(filename='vulnerability_patcher.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

# File containing vulnerability information
VULNERABILITIES_FILE = "vulnerabilities.json"

# Load vulnerabilities from a file
def load_vulnerabilities(file_path):
    try:
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"Vulnerabilities file not found: {file_path}")
        with open(file_path, 'r') as file:
            vulnerabilities = json.load(file)
            logging.info(f"Successfully loaded vulnerabilities from {file_path}")
            return vulnerabilities
    except FileNotFoundError as e:
        logging.error(str(e))
        raise
    except Exception as e:
        logging.error(f"Error occurred while loading vulnerabilities: {str(e)}")
        raise

# Patch vulnerabilities
def patch_vulnerabilities(vulnerabilities):
    try:
        for vulnerability in vulnerabilities:
            logging.info(f"Patching vulnerability: {vulnerability['name']}")
            print(f"Patching vulnerability: {vulnerability['name']}")
            # Example command to patch vulnerability (Linux)
            command = vulnerability.get("patch_command")
            if command:
                subprocess.run(command, shell=True, check=True)
                logging.info(f"Successfully patched: {vulnerability['name']}")
                print(f"Successfully patched: {vulnerability['name']}")
            else:
                logging.warning(f"No patch command found for: {vulnerability['name']}")
                print(f"No patch command found for: {vulnerability['name']}")
    except subprocess.CalledProcessError as e:
        logging.error(f"Failed to patch vulnerability. Error: {str(e)}")
        print(f"Failed to patch vulnerability. Error: {str(e)}")
    except Exception as e:
        logging.error(f"Unexpected error occurred while patching vulnerabilities: {str(e)}")
        print(f"Unexpected error: {str(e)}")

if __name__ == "__main__":
    try:
        # Load vulnerabilities from file
        vulnerabilities_data = load_vulnerabilities(VULNERABILITIES_FILE)

        patch_vulnerabilities(vulnerabilities_data)
    except Exception as e:
        logging.error(f"Unexpected error during vulnerability patching: {str(e)}")
        print(f"Error: {str(e)}")

import os
import logging
import subprocess
import hashlib

logging.basicConfig(filename='malware_removal_tool.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

# Directory to scan for malware
SCAN_DIRECTORY = "/"

# Malware signatures database (hashes)
MALWARE_SIGNATURES = {
    "e99a18c428cb38d5f260853678922e03": "Example Malware A",
    "ab56b4d92b40713acc5af89985d4b786": "Example Malware B"
}

# Calculate file hash
def calculate_file_hash(file_path):
    try:
        hash_md5 = hashlib.md5()
        with open(file_path, "rb") as f:
            for chunk in iter(lambda: f.read(4096), b""):
                hash_md5.update(chunk)
        return hash_md5.hexdigest()
    except Exception as e:
        logging.error(f"Error occurred while calculating hash for {file_path}: {str(e)}")
        return None

# Scan for malware
def scan_for_malware(directory):
    try:
        logging.info("Starting malware scan...")
        for root, _, files in os.walk(directory):
            for file in files:
                file_path = os.path.join(root, file)
                file_hash = calculate_file_hash(file_path)
                if file_hash in MALWARE_SIGNATURES:
                    logging.warning(f"Malware detected: {MALWARE_SIGNATURES[file_hash]} in {file_path}")
                    print(f"Malware detected: {MALWARE_SIGNATURES[file_hash]} in {file_path}")
                    remove_malware(file_path)
        logging.info("Malware scan completed.")
    except Exception as e:
        logging.error(f"Error occurred during malware scan: {str(e)}")
        print(f"Error: {str(e)}")

# Remove detected malware
def remove_malware(file_path):
    try:
        os.remove(file_path)
        logging.info(f"Successfully removed malware: {file_path}")
        print(f"Successfully removed malware: {file_path}")
    except Exception as e:
        logging.error(f"Failed to remove malware: {file_path}. Error: {str(e)}")
        print(f"Failed to remove malware: {file_path}. Error: {str(e)}")

if __name__ == "__main__":
    try:
        scan_for_malware(SCAN_DIRECTORY)
    except Exception as e:
        logging.error(f"Unexpected error during malware removal: {str(e)}")
        print(f"Error: {str(e)}")

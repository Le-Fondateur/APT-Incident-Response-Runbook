import hashlib
import os
import logging
import subprocess

# Configure logging
logging.basicConfig(filename='malware_analysis_tool.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

# Path to malware samples directory
MALWARE_SAMPLES_DIRECTORY = "malware_samples/"
ANALYSIS_OUTPUT_DIRECTORY = "analysis_reports/"

# Function to generate hash of a file
def generate_file_hash(file_path):
    try:
        sha256_hash = hashlib.sha256()
        with open(file_path, "rb") as f:
            for byte_block in iter(lambda: f.read(4096), b""):
                sha256_hash.update(byte_block)
        return sha256_hash.hexdigest()
    except Exception as e:
        logging.error(f"Error occurred while generating hash for {file_path}: {str(e)}")
        raise

# Function to perform static analysis using strings command
def perform_static_analysis(file_path):
    try:
        output_file = os.path.join(ANALYSIS_OUTPUT_DIRECTORY, os.path.basename(file_path) + "_static.txt")
        with open(output_file, "w") as f:
            subprocess.run(["strings", file_path], stdout=f, check=True)
        logging.info(f"Static analysis completed for {file_path}, output saved to {output_file}")
    except subprocess.CalledProcessError as e:
        logging.error(f"Error during static analysis for {file_path}: {str(e)}")
        raise
    except Exception as e:
        logging.error(f"Unexpected error during static analysis for {file_path}: {str(e)}")
        raise

# Function to analyze malware samples
def analyze_malware_samples(directory):
    try:
        if not os.path.exists(ANALYSIS_OUTPUT_DIRECTORY):
            os.makedirs(ANALYSIS_OUTPUT_DIRECTORY)

        for root, _, files in os.walk(directory):
            for file in files:
                file_path = os.path.join(root, file)
                logging.info(f"Analyzing malware sample: {file_path}")
                # Generate file hash
                file_hash = generate_file_hash(file_path)
                logging.info(f"Generated SHA256 hash for {file}: {file_hash}")
                # Perform static analysis
                perform_static_analysis(file_path)
    except Exception as e:
        logging.error(f"Error occurred during malware sample analysis: {str(e)}")
        raise

if __name__ == "__main__":
    try:
        analyze_malware_samples(MALWARE_SAMPLES_DIRECTORY)
    except Exception as e:
        print(f"Error: {str(e)}")
